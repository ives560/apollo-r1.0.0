syntax = "proto2";

package apollo.common;

// 地图参考系中的一个点。
// 地图定义了一个原点，坐标为(0,0,0)，
// 大部分模块，包括定位、感知、预测，都是基于地图参考系生成结果。
// 目前，地图采用通用横轴墨卡托投影。
// 有关地图原点的定义，请参见下面的链接。
//   https://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system
// 可以忽略PointENU的z字段。如果忽略，它是一个二维位置，我们不关心它的高度。
message PointENU {
    optional double x = 1 [default = nan];  // East from the origin, in meters.
    optional double y = 2 [default = nan];  // North from the origin, in meters.
    optional double z = 3 [default = 0.0];  // Up from the WGS-84 ellipsoid, in meters.
}

// 全局参照系中的一个点。与PointENU类似，PointLLH允许省略表示2D位置的height字段。
message PointLLH {
    optional double lon = 1 [default = nan];  // Longitude in degrees, ranging from -180 to 180.
    optional double lat = 2 [default = nan];  // Latitude in degrees, ranging from -90 to 90.
    optional double height = 3 [default = 0.0];  // WGS-84 ellipsoid height in meters.
}

// A general 2D point. Its meaning and units depend on context, and must be explained in comments.
message Point2D {
    optional double x = 1 [default = nan];
    optional double y = 2 [default = nan];
}

// A general 3D point. Its meaning and units depend on context, and must be explained in comments.
message Point3D {
    optional double x = 1 [default = nan];
    optional double y = 2 [default = nan];
    optional double z = 3 [default = nan];
}

// 表示空间旋转的单位四元数。有关详细信息，请参见下面的链接。
//   https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation
// 标量部分qw可以省略。在这种情况下，qw应该通过以下公式计算
//   qw = sqrt(1 - qx * qx - qy * qy - qz * qz).
message Quaternion {
    optional double qx = 1 [default = nan];
    optional double qy = 2 [default = nan];
    optional double qz = 3 [default = nan];
    optional double qw = 4 [default = nan];
}
